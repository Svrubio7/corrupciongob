# Generated by Django 4.2.7 on 2024-01-01 00:00

from django.db import migrations, models, connection


def check_column_exists(table_name, column_name):
    """Check if a column exists in the table"""
    with connection.cursor() as cursor:
        # SQLite version
        cursor.execute("PRAGMA table_info(%s)" % table_name)
        columns = [row[1] for row in cursor.fetchall()]
        return column_name in columns


def add_missing_fields(apps, schema_editor):
    """Add missing fields if they don't exist"""
    table_name = 'corruption_cases_corruptioncase'
    
    # List of fields to add
    fields_to_add = [
        ('author_name', models.CharField(blank=True, help_text='Nombre del autor del artículo', max_length=200)),
        ('is_annual_amount', models.BooleanField(default=False, help_text='¿Es esta cantidad un gasto anual?')),
        ('publication_type', models.CharField(
            choices=[
                ('article', 'Artículo'),
                ('case', 'Caso'),
                ('opinion', 'Artículo de Opinión'),
                ('report', 'Informe'),
                ('investigation', 'Investigación'),
                ('news', 'Noticia'),
                ('video', 'Vídeo'),
                ('other', 'Otro'),
            ],
            default='case',
            help_text='Tipo de publicación',
            max_length=50
        )),
        ('start_date', models.DateField(blank=True, help_text='Fecha de comienzo del gasto (para calcular años de duración)', null=True)),
        ('video_url', models.URLField(blank=True, help_text="URL del video (solo para publicaciones tipo 'video')", null=True)),
    ]
    
    # Add fields that don't exist
    for field_name, field in fields_to_add:
        if not check_column_exists(table_name, field_name):
            with connection.cursor() as cursor:
                if field_name == 'author_name':
                    cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {field_name} VARCHAR(200) DEFAULT ''")
                elif field_name == 'is_annual_amount':
                    cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {field_name} BOOLEAN DEFAULT FALSE")
                elif field_name == 'publication_type':
                    cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {field_name} VARCHAR(50) DEFAULT 'case'")
                elif field_name == 'start_date':
                    cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {field_name} DATE NULL")
                elif field_name == 'video_url':
                    cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN {field_name} VARCHAR(200) NULL")
    
    # Set publication_type to 'case' for all existing records
    CorruptionCase = apps.get_model('corruption_cases', 'CorruptionCase')
    CorruptionCase.objects.all().update(publication_type='case')


def reverse_add_missing_fields(apps, schema_editor):
    """Remove the fields that were added"""
    table_name = 'corruption_cases_corruptioncase'
    fields_to_remove = ['author_name', 'is_annual_amount', 'publication_type', 'start_date', 'video_url']
    
    for field_name in fields_to_remove:
        if check_column_exists(table_name, field_name):
            with connection.cursor() as cursor:
                cursor.execute(f"ALTER TABLE {table_name} DROP COLUMN IF EXISTS {field_name}")


class Migration(migrations.Migration):

    dependencies = [
        ('corruption_cases', '0003_corruptioncase_author_name_and_more'),
    ]

    operations = [
        migrations.RunPython(add_missing_fields, reverse_add_missing_fields),
    ]
